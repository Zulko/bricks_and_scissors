<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bricks and Scissors</title><link>https://zulko.github.io/bricks_and_scissors/</link><description>Recent content on Bricks and Scissors</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 08 Apr 2021 08:47:11 +0100</lastBuildDate><atom:link href="https://zulko.github.io/bricks_and_scissors/index.xml" rel="self" type="application/rss+xml"/><item><title>Strange dominos: the fun and perils of DNA overhang design</title><link>https://zulko.github.io/bricks_and_scissors/posts/overhangs/</link><pubDate>Thu, 08 Apr 2021 08:47:11 +0100</pubDate><guid>https://zulko.github.io/bricks_and_scissors/posts/overhangs/</guid><description>Note: I simplified technical terms and details whenever possible to keep this post focused on the design problems and accessible to a larger audience.
If you want to stitch more than 2 bits of DNA together, the most popular method these days is probably Golden Gate Assembly. In a nutshell, you mix DNA fragments in a tube where enzymes will cut their flanks to create overhangs (also called sticky ends), then fuse the overhangs together to form the desired DNA construct:</description></item><item><title>Strange dominos: the fun and perils of DNA overhang design</title><link>https://zulko.github.io/bricks_and_scissors/posts/weaver/</link><pubDate>Thu, 08 Apr 2021 08:47:11 +0100</pubDate><guid>https://zulko.github.io/bricks_and_scissors/posts/weaver/</guid><description>The shortest path to DNA construction def graph = nx.DiGraph( optimal_cost_for_sequence(sequence[i:j]) for i in in nx.shortest_path(graph[] This is one of the optimization tricks I am the most proud of, but as far as I can tell I might not have been the first to use it. The DNA manufacturer Twist Bioscience has been posting job adverts ) &amp;ldquo;Software engineers with graph theory skills&amp;rdquo; for years and my guess is that this is the kind of things they do.</description></item></channel></rss>